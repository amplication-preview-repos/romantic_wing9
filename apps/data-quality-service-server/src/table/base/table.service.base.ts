/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Table as PrismaTable,
  Column as PrismaColumn,
  AnalysisResult as PrismaAnalysisResult,
  Database as PrismaDatabase,
} from "@prisma/client";

export class TableServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TableCountArgs, "select">): Promise<number> {
    return this.prisma.table.count(args);
  }

  async tables(args: Prisma.TableFindManyArgs): Promise<PrismaTable[]> {
    return this.prisma.table.findMany(args);
  }
  async table(args: Prisma.TableFindUniqueArgs): Promise<PrismaTable | null> {
    return this.prisma.table.findUnique(args);
  }
  async createTable(args: Prisma.TableCreateArgs): Promise<PrismaTable> {
    return this.prisma.table.create(args);
  }
  async updateTable(args: Prisma.TableUpdateArgs): Promise<PrismaTable> {
    return this.prisma.table.update(args);
  }
  async deleteTable(args: Prisma.TableDeleteArgs): Promise<PrismaTable> {
    return this.prisma.table.delete(args);
  }

  async findColumns(
    parentId: string,
    args: Prisma.ColumnFindManyArgs
  ): Promise<PrismaColumn[]> {
    return this.prisma.table
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .columns(args);
  }

  async findAnalysisResults(
    parentId: string,
    args: Prisma.AnalysisResultFindManyArgs
  ): Promise<PrismaAnalysisResult[]> {
    return this.prisma.table
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .analysisResults(args);
  }

  async getDatabase(parentId: string): Promise<PrismaDatabase | null> {
    return this.prisma.table
      .findUnique({
        where: { id: parentId },
      })
      .database();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RecipeColumns as PrismaRecipeColumns,
  RecipeStep as PrismaRecipeStep,
  Column as PrismaColumn,
} from "@prisma/client";

export class RecipeColumnsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RecipeColumnsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.recipeColumns.count(args);
  }

  async recipeColumnsItems(
    args: Prisma.RecipeColumnsFindManyArgs
  ): Promise<PrismaRecipeColumns[]> {
    return this.prisma.recipeColumns.findMany(args);
  }
  async recipeColumns(
    args: Prisma.RecipeColumnsFindUniqueArgs
  ): Promise<PrismaRecipeColumns | null> {
    return this.prisma.recipeColumns.findUnique(args);
  }
  async createRecipeColumns(
    args: Prisma.RecipeColumnsCreateArgs
  ): Promise<PrismaRecipeColumns> {
    return this.prisma.recipeColumns.create(args);
  }
  async updateRecipeColumns(
    args: Prisma.RecipeColumnsUpdateArgs
  ): Promise<PrismaRecipeColumns> {
    return this.prisma.recipeColumns.update(args);
  }
  async deleteRecipeColumns(
    args: Prisma.RecipeColumnsDeleteArgs
  ): Promise<PrismaRecipeColumns> {
    return this.prisma.recipeColumns.delete(args);
  }

  async getRecipeStep(parentId: string): Promise<PrismaRecipeStep | null> {
    return this.prisma.recipeColumns
      .findUnique({
        where: { id: parentId },
      })
      .recipeStep();
  }

  async getColumn(parentId: string): Promise<PrismaColumn | null> {
    return this.prisma.recipeColumns
      .findUnique({
        where: { id: parentId },
      })
      .column();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecipeColumnsService } from "../recipeColumns.service";
import { RecipeColumnsCreateInput } from "./RecipeColumnsCreateInput";
import { RecipeColumns } from "./RecipeColumns";
import { RecipeColumnsFindManyArgs } from "./RecipeColumnsFindManyArgs";
import { RecipeColumnsWhereUniqueInput } from "./RecipeColumnsWhereUniqueInput";
import { RecipeColumnsUpdateInput } from "./RecipeColumnsUpdateInput";

export class RecipeColumnsControllerBase {
  constructor(protected readonly service: RecipeColumnsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RecipeColumns })
  async createRecipeColumns(
    @common.Body() data: RecipeColumnsCreateInput
  ): Promise<RecipeColumns> {
    return await this.service.createRecipeColumns({
      data: {
        ...data,

        recipeStep: data.recipeStep
          ? {
              connect: data.recipeStep,
            }
          : undefined,

        column: data.column
          ? {
              connect: data.column,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        recipeStep: {
          select: {
            id: true,
          },
        },

        column: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RecipeColumns] })
  @ApiNestedQuery(RecipeColumnsFindManyArgs)
  async recipeColumnsItems(
    @common.Req() request: Request
  ): Promise<RecipeColumns[]> {
    const args = plainToClass(RecipeColumnsFindManyArgs, request.query);
    return this.service.recipeColumnsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        recipeStep: {
          select: {
            id: true,
          },
        },

        column: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RecipeColumns })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recipeColumns(
    @common.Param() params: RecipeColumnsWhereUniqueInput
  ): Promise<RecipeColumns | null> {
    const result = await this.service.recipeColumns({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        recipeStep: {
          select: {
            id: true,
          },
        },

        column: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RecipeColumns })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecipeColumns(
    @common.Param() params: RecipeColumnsWhereUniqueInput,
    @common.Body() data: RecipeColumnsUpdateInput
  ): Promise<RecipeColumns | null> {
    try {
      return await this.service.updateRecipeColumns({
        where: params,
        data: {
          ...data,

          recipeStep: data.recipeStep
            ? {
                connect: data.recipeStep,
              }
            : undefined,

          column: data.column
            ? {
                connect: data.column,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          recipeStep: {
            select: {
              id: true,
            },
          },

          column: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RecipeColumns })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecipeColumns(
    @common.Param() params: RecipeColumnsWhereUniqueInput
  ): Promise<RecipeColumns | null> {
    try {
      return await this.service.deleteRecipeColumns({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          recipeStep: {
            select: {
              id: true,
            },
          },

          column: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

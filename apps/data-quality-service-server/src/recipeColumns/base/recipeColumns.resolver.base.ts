/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RecipeColumns } from "./RecipeColumns";
import { RecipeColumnsCountArgs } from "./RecipeColumnsCountArgs";
import { RecipeColumnsFindManyArgs } from "./RecipeColumnsFindManyArgs";
import { RecipeColumnsFindUniqueArgs } from "./RecipeColumnsFindUniqueArgs";
import { CreateRecipeColumnsArgs } from "./CreateRecipeColumnsArgs";
import { UpdateRecipeColumnsArgs } from "./UpdateRecipeColumnsArgs";
import { DeleteRecipeColumnsArgs } from "./DeleteRecipeColumnsArgs";
import { RecipeStep } from "../../recipeStep/base/RecipeStep";
import { Column } from "../../column/base/Column";
import { RecipeColumnsService } from "../recipeColumns.service";
@graphql.Resolver(() => RecipeColumns)
export class RecipeColumnsResolverBase {
  constructor(protected readonly service: RecipeColumnsService) {}

  async _recipeColumnsItemsMeta(
    @graphql.Args() args: RecipeColumnsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RecipeColumns])
  async recipeColumnsItems(
    @graphql.Args() args: RecipeColumnsFindManyArgs
  ): Promise<RecipeColumns[]> {
    return this.service.recipeColumnsItems(args);
  }

  @graphql.Query(() => RecipeColumns, { nullable: true })
  async recipeColumns(
    @graphql.Args() args: RecipeColumnsFindUniqueArgs
  ): Promise<RecipeColumns | null> {
    const result = await this.service.recipeColumns(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RecipeColumns)
  async createRecipeColumns(
    @graphql.Args() args: CreateRecipeColumnsArgs
  ): Promise<RecipeColumns> {
    return await this.service.createRecipeColumns({
      ...args,
      data: {
        ...args.data,

        recipeStep: args.data.recipeStep
          ? {
              connect: args.data.recipeStep,
            }
          : undefined,

        column: args.data.column
          ? {
              connect: args.data.column,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RecipeColumns)
  async updateRecipeColumns(
    @graphql.Args() args: UpdateRecipeColumnsArgs
  ): Promise<RecipeColumns | null> {
    try {
      return await this.service.updateRecipeColumns({
        ...args,
        data: {
          ...args.data,

          recipeStep: args.data.recipeStep
            ? {
                connect: args.data.recipeStep,
              }
            : undefined,

          column: args.data.column
            ? {
                connect: args.data.column,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecipeColumns)
  async deleteRecipeColumns(
    @graphql.Args() args: DeleteRecipeColumnsArgs
  ): Promise<RecipeColumns | null> {
    try {
      return await this.service.deleteRecipeColumns(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => RecipeStep, {
    nullable: true,
    name: "recipeStep",
  })
  async getRecipeStep(
    @graphql.Parent() parent: RecipeColumns
  ): Promise<RecipeStep | null> {
    const result = await this.service.getRecipeStep(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Column, {
    nullable: true,
    name: "column",
  })
  async getColumn(
    @graphql.Parent() parent: RecipeColumns
  ): Promise<Column | null> {
    const result = await this.service.getColumn(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

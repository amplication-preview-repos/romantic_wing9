/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  QualityRule as PrismaQualityRule,
  RecipeStep as PrismaRecipeStep,
} from "@prisma/client";

export class QualityRuleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QualityRuleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.qualityRule.count(args);
  }

  async qualityRules(
    args: Prisma.QualityRuleFindManyArgs
  ): Promise<PrismaQualityRule[]> {
    return this.prisma.qualityRule.findMany(args);
  }
  async qualityRule(
    args: Prisma.QualityRuleFindUniqueArgs
  ): Promise<PrismaQualityRule | null> {
    return this.prisma.qualityRule.findUnique(args);
  }
  async createQualityRule(
    args: Prisma.QualityRuleCreateArgs
  ): Promise<PrismaQualityRule> {
    return this.prisma.qualityRule.create(args);
  }
  async updateQualityRule(
    args: Prisma.QualityRuleUpdateArgs
  ): Promise<PrismaQualityRule> {
    return this.prisma.qualityRule.update(args);
  }
  async deleteQualityRule(
    args: Prisma.QualityRuleDeleteArgs
  ): Promise<PrismaQualityRule> {
    return this.prisma.qualityRule.delete(args);
  }

  async findRecipeSteps(
    parentId: string,
    args: Prisma.RecipeStepFindManyArgs
  ): Promise<PrismaRecipeStep[]> {
    return this.prisma.qualityRule
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recipeSteps(args);
  }
}

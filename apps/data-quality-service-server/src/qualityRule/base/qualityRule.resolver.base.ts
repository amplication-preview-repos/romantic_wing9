/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QualityRule } from "./QualityRule";
import { QualityRuleCountArgs } from "./QualityRuleCountArgs";
import { QualityRuleFindManyArgs } from "./QualityRuleFindManyArgs";
import { QualityRuleFindUniqueArgs } from "./QualityRuleFindUniqueArgs";
import { CreateQualityRuleArgs } from "./CreateQualityRuleArgs";
import { UpdateQualityRuleArgs } from "./UpdateQualityRuleArgs";
import { DeleteQualityRuleArgs } from "./DeleteQualityRuleArgs";
import { RecipeStepFindManyArgs } from "../../recipeStep/base/RecipeStepFindManyArgs";
import { RecipeStep } from "../../recipeStep/base/RecipeStep";
import { QualityRuleService } from "../qualityRule.service";
@graphql.Resolver(() => QualityRule)
export class QualityRuleResolverBase {
  constructor(protected readonly service: QualityRuleService) {}

  async _qualityRulesMeta(
    @graphql.Args() args: QualityRuleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QualityRule])
  async qualityRules(
    @graphql.Args() args: QualityRuleFindManyArgs
  ): Promise<QualityRule[]> {
    return this.service.qualityRules(args);
  }

  @graphql.Query(() => QualityRule, { nullable: true })
  async qualityRule(
    @graphql.Args() args: QualityRuleFindUniqueArgs
  ): Promise<QualityRule | null> {
    const result = await this.service.qualityRule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QualityRule)
  async createQualityRule(
    @graphql.Args() args: CreateQualityRuleArgs
  ): Promise<QualityRule> {
    return await this.service.createQualityRule({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => QualityRule)
  async updateQualityRule(
    @graphql.Args() args: UpdateQualityRuleArgs
  ): Promise<QualityRule | null> {
    try {
      return await this.service.updateQualityRule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QualityRule)
  async deleteQualityRule(
    @graphql.Args() args: DeleteQualityRuleArgs
  ): Promise<QualityRule | null> {
    try {
      return await this.service.deleteQualityRule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [RecipeStep], { name: "recipeSteps" })
  async findRecipeSteps(
    @graphql.Parent() parent: QualityRule,
    @graphql.Args() args: RecipeStepFindManyArgs
  ): Promise<RecipeStep[]> {
    const results = await this.service.findRecipeSteps(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QualityRuleService } from "../qualityRule.service";
import { QualityRuleCreateInput } from "./QualityRuleCreateInput";
import { QualityRule } from "./QualityRule";
import { QualityRuleFindManyArgs } from "./QualityRuleFindManyArgs";
import { QualityRuleWhereUniqueInput } from "./QualityRuleWhereUniqueInput";
import { QualityRuleUpdateInput } from "./QualityRuleUpdateInput";
import { RecipeStepFindManyArgs } from "../../recipeStep/base/RecipeStepFindManyArgs";
import { RecipeStep } from "../../recipeStep/base/RecipeStep";
import { RecipeStepWhereUniqueInput } from "../../recipeStep/base/RecipeStepWhereUniqueInput";

export class QualityRuleControllerBase {
  constructor(protected readonly service: QualityRuleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QualityRule })
  async createQualityRule(
    @common.Body() data: QualityRuleCreateInput
  ): Promise<QualityRule> {
    return await this.service.createQualityRule({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        ruleType: true,
        script: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QualityRule] })
  @ApiNestedQuery(QualityRuleFindManyArgs)
  async qualityRules(@common.Req() request: Request): Promise<QualityRule[]> {
    const args = plainToClass(QualityRuleFindManyArgs, request.query);
    return this.service.qualityRules({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        ruleType: true,
        script: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QualityRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async qualityRule(
    @common.Param() params: QualityRuleWhereUniqueInput
  ): Promise<QualityRule | null> {
    const result = await this.service.qualityRule({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        ruleType: true,
        script: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QualityRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQualityRule(
    @common.Param() params: QualityRuleWhereUniqueInput,
    @common.Body() data: QualityRuleUpdateInput
  ): Promise<QualityRule | null> {
    try {
      return await this.service.updateQualityRule({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          ruleType: true,
          script: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QualityRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQualityRule(
    @common.Param() params: QualityRuleWhereUniqueInput
  ): Promise<QualityRule | null> {
    try {
      return await this.service.deleteQualityRule({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          ruleType: true,
          script: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/recipeSteps")
  @ApiNestedQuery(RecipeStepFindManyArgs)
  async findRecipeSteps(
    @common.Req() request: Request,
    @common.Param() params: QualityRuleWhereUniqueInput
  ): Promise<RecipeStep[]> {
    const query = plainToClass(RecipeStepFindManyArgs, request.query);
    const results = await this.service.findRecipeSteps(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        order: true,
        parameters: true,

        qualityRule: {
          select: {
            id: true,
          },
        },

        recipe: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recipeSteps")
  async connectRecipeSteps(
    @common.Param() params: QualityRuleWhereUniqueInput,
    @common.Body() body: RecipeStepWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipeSteps: {
        connect: body,
      },
    };
    await this.service.updateQualityRule({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recipeSteps")
  async updateRecipeSteps(
    @common.Param() params: QualityRuleWhereUniqueInput,
    @common.Body() body: RecipeStepWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipeSteps: {
        set: body,
      },
    };
    await this.service.updateQualityRule({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recipeSteps")
  async disconnectRecipeSteps(
    @common.Param() params: QualityRuleWhereUniqueInput,
    @common.Body() body: RecipeStepWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipeSteps: {
        disconnect: body,
      },
    };
    await this.service.updateQualityRule({
      where: params,
      data,
      select: { id: true },
    });
  }
}

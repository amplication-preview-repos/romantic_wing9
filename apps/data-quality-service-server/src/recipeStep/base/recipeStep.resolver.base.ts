/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RecipeStep } from "./RecipeStep";
import { RecipeStepCountArgs } from "./RecipeStepCountArgs";
import { RecipeStepFindManyArgs } from "./RecipeStepFindManyArgs";
import { RecipeStepFindUniqueArgs } from "./RecipeStepFindUniqueArgs";
import { CreateRecipeStepArgs } from "./CreateRecipeStepArgs";
import { UpdateRecipeStepArgs } from "./UpdateRecipeStepArgs";
import { DeleteRecipeStepArgs } from "./DeleteRecipeStepArgs";
import { RecipeColumnsFindManyArgs } from "../../recipeColumns/base/RecipeColumnsFindManyArgs";
import { RecipeColumns } from "../../recipeColumns/base/RecipeColumns";
import { QualityRule } from "../../qualityRule/base/QualityRule";
import { Recipe } from "../../recipe/base/Recipe";
import { RecipeStepService } from "../recipeStep.service";
@graphql.Resolver(() => RecipeStep)
export class RecipeStepResolverBase {
  constructor(protected readonly service: RecipeStepService) {}

  async _recipeStepsMeta(
    @graphql.Args() args: RecipeStepCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RecipeStep])
  async recipeSteps(
    @graphql.Args() args: RecipeStepFindManyArgs
  ): Promise<RecipeStep[]> {
    return this.service.recipeSteps(args);
  }

  @graphql.Query(() => RecipeStep, { nullable: true })
  async recipeStep(
    @graphql.Args() args: RecipeStepFindUniqueArgs
  ): Promise<RecipeStep | null> {
    const result = await this.service.recipeStep(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RecipeStep)
  async createRecipeStep(
    @graphql.Args() args: CreateRecipeStepArgs
  ): Promise<RecipeStep> {
    return await this.service.createRecipeStep({
      ...args,
      data: {
        ...args.data,

        qualityRule: args.data.qualityRule
          ? {
              connect: args.data.qualityRule,
            }
          : undefined,

        recipe: args.data.recipe
          ? {
              connect: args.data.recipe,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RecipeStep)
  async updateRecipeStep(
    @graphql.Args() args: UpdateRecipeStepArgs
  ): Promise<RecipeStep | null> {
    try {
      return await this.service.updateRecipeStep({
        ...args,
        data: {
          ...args.data,

          qualityRule: args.data.qualityRule
            ? {
                connect: args.data.qualityRule,
              }
            : undefined,

          recipe: args.data.recipe
            ? {
                connect: args.data.recipe,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecipeStep)
  async deleteRecipeStep(
    @graphql.Args() args: DeleteRecipeStepArgs
  ): Promise<RecipeStep | null> {
    try {
      return await this.service.deleteRecipeStep(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [RecipeColumns], { name: "recipeColumnsItems" })
  async findRecipeColumnsItems(
    @graphql.Parent() parent: RecipeStep,
    @graphql.Args() args: RecipeColumnsFindManyArgs
  ): Promise<RecipeColumns[]> {
    const results = await this.service.findRecipeColumnsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => QualityRule, {
    nullable: true,
    name: "qualityRule",
  })
  async getQualityRule(
    @graphql.Parent() parent: RecipeStep
  ): Promise<QualityRule | null> {
    const result = await this.service.getQualityRule(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Recipe, {
    nullable: true,
    name: "recipe",
  })
  async getRecipe(
    @graphql.Parent() parent: RecipeStep
  ): Promise<Recipe | null> {
    const result = await this.service.getRecipe(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RecipeStep as PrismaRecipeStep,
  RecipeColumns as PrismaRecipeColumns,
  QualityRule as PrismaQualityRule,
  Recipe as PrismaRecipe,
} from "@prisma/client";

export class RecipeStepServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RecipeStepCountArgs, "select">
  ): Promise<number> {
    return this.prisma.recipeStep.count(args);
  }

  async recipeSteps(
    args: Prisma.RecipeStepFindManyArgs
  ): Promise<PrismaRecipeStep[]> {
    return this.prisma.recipeStep.findMany(args);
  }
  async recipeStep(
    args: Prisma.RecipeStepFindUniqueArgs
  ): Promise<PrismaRecipeStep | null> {
    return this.prisma.recipeStep.findUnique(args);
  }
  async createRecipeStep(
    args: Prisma.RecipeStepCreateArgs
  ): Promise<PrismaRecipeStep> {
    return this.prisma.recipeStep.create(args);
  }
  async updateRecipeStep(
    args: Prisma.RecipeStepUpdateArgs
  ): Promise<PrismaRecipeStep> {
    return this.prisma.recipeStep.update(args);
  }
  async deleteRecipeStep(
    args: Prisma.RecipeStepDeleteArgs
  ): Promise<PrismaRecipeStep> {
    return this.prisma.recipeStep.delete(args);
  }

  async findRecipeColumnsItems(
    parentId: string,
    args: Prisma.RecipeColumnsFindManyArgs
  ): Promise<PrismaRecipeColumns[]> {
    return this.prisma.recipeStep
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recipeColumnsItems(args);
  }

  async getQualityRule(parentId: string): Promise<PrismaQualityRule | null> {
    return this.prisma.recipeStep
      .findUnique({
        where: { id: parentId },
      })
      .qualityRule();
  }

  async getRecipe(parentId: string): Promise<PrismaRecipe | null> {
    return this.prisma.recipeStep
      .findUnique({
        where: { id: parentId },
      })
      .recipe();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecipeStepService } from "../recipeStep.service";
import { RecipeStepCreateInput } from "./RecipeStepCreateInput";
import { RecipeStep } from "./RecipeStep";
import { RecipeStepFindManyArgs } from "./RecipeStepFindManyArgs";
import { RecipeStepWhereUniqueInput } from "./RecipeStepWhereUniqueInput";
import { RecipeStepUpdateInput } from "./RecipeStepUpdateInput";
import { RecipeColumnsFindManyArgs } from "../../recipeColumns/base/RecipeColumnsFindManyArgs";
import { RecipeColumns } from "../../recipeColumns/base/RecipeColumns";
import { RecipeColumnsWhereUniqueInput } from "../../recipeColumns/base/RecipeColumnsWhereUniqueInput";

export class RecipeStepControllerBase {
  constructor(protected readonly service: RecipeStepService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RecipeStep })
  async createRecipeStep(
    @common.Body() data: RecipeStepCreateInput
  ): Promise<RecipeStep> {
    return await this.service.createRecipeStep({
      data: {
        ...data,

        qualityRule: data.qualityRule
          ? {
              connect: data.qualityRule,
            }
          : undefined,

        recipe: data.recipe
          ? {
              connect: data.recipe,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        order: true,
        parameters: true,

        qualityRule: {
          select: {
            id: true,
          },
        },

        recipe: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RecipeStep] })
  @ApiNestedQuery(RecipeStepFindManyArgs)
  async recipeSteps(@common.Req() request: Request): Promise<RecipeStep[]> {
    const args = plainToClass(RecipeStepFindManyArgs, request.query);
    return this.service.recipeSteps({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        order: true,
        parameters: true,

        qualityRule: {
          select: {
            id: true,
          },
        },

        recipe: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RecipeStep })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recipeStep(
    @common.Param() params: RecipeStepWhereUniqueInput
  ): Promise<RecipeStep | null> {
    const result = await this.service.recipeStep({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        order: true,
        parameters: true,

        qualityRule: {
          select: {
            id: true,
          },
        },

        recipe: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RecipeStep })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecipeStep(
    @common.Param() params: RecipeStepWhereUniqueInput,
    @common.Body() data: RecipeStepUpdateInput
  ): Promise<RecipeStep | null> {
    try {
      return await this.service.updateRecipeStep({
        where: params,
        data: {
          ...data,

          qualityRule: data.qualityRule
            ? {
                connect: data.qualityRule,
              }
            : undefined,

          recipe: data.recipe
            ? {
                connect: data.recipe,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          order: true,
          parameters: true,

          qualityRule: {
            select: {
              id: true,
            },
          },

          recipe: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RecipeStep })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecipeStep(
    @common.Param() params: RecipeStepWhereUniqueInput
  ): Promise<RecipeStep | null> {
    try {
      return await this.service.deleteRecipeStep({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          order: true,
          parameters: true,

          qualityRule: {
            select: {
              id: true,
            },
          },

          recipe: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/recipeColumnsItems")
  @ApiNestedQuery(RecipeColumnsFindManyArgs)
  async findRecipeColumnsItems(
    @common.Req() request: Request,
    @common.Param() params: RecipeStepWhereUniqueInput
  ): Promise<RecipeColumns[]> {
    const query = plainToClass(RecipeColumnsFindManyArgs, request.query);
    const results = await this.service.findRecipeColumnsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        recipeStep: {
          select: {
            id: true,
          },
        },

        column: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recipeColumnsItems")
  async connectRecipeColumnsItems(
    @common.Param() params: RecipeStepWhereUniqueInput,
    @common.Body() body: RecipeColumnsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipeColumnsItems: {
        connect: body,
      },
    };
    await this.service.updateRecipeStep({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recipeColumnsItems")
  async updateRecipeColumnsItems(
    @common.Param() params: RecipeStepWhereUniqueInput,
    @common.Body() body: RecipeColumnsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipeColumnsItems: {
        set: body,
      },
    };
    await this.service.updateRecipeStep({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recipeColumnsItems")
  async disconnectRecipeColumnsItems(
    @common.Param() params: RecipeStepWhereUniqueInput,
    @common.Body() body: RecipeColumnsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipeColumnsItems: {
        disconnect: body,
      },
    };
    await this.service.updateRecipeStep({
      where: params,
      data,
      select: { id: true },
    });
  }
}

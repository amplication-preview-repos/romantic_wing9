/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AppUser } from "./AppUser";
import { AppUserCountArgs } from "./AppUserCountArgs";
import { AppUserFindManyArgs } from "./AppUserFindManyArgs";
import { AppUserFindUniqueArgs } from "./AppUserFindUniqueArgs";
import { CreateAppUserArgs } from "./CreateAppUserArgs";
import { UpdateAppUserArgs } from "./UpdateAppUserArgs";
import { DeleteAppUserArgs } from "./DeleteAppUserArgs";
import { AppUserService } from "../appUser.service";
@graphql.Resolver(() => AppUser)
export class AppUserResolverBase {
  constructor(protected readonly service: AppUserService) {}

  async _appUsersMeta(
    @graphql.Args() args: AppUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AppUser])
  async appUsers(
    @graphql.Args() args: AppUserFindManyArgs
  ): Promise<AppUser[]> {
    return this.service.appUsers(args);
  }

  @graphql.Query(() => AppUser, { nullable: true })
  async appUser(
    @graphql.Args() args: AppUserFindUniqueArgs
  ): Promise<AppUser | null> {
    const result = await this.service.appUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AppUser)
  async createAppUser(
    @graphql.Args() args: CreateAppUserArgs
  ): Promise<AppUser> {
    return await this.service.createAppUser({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AppUser)
  async updateAppUser(
    @graphql.Args() args: UpdateAppUserArgs
  ): Promise<AppUser | null> {
    try {
      return await this.service.updateAppUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppUser)
  async deleteAppUser(
    @graphql.Args() args: DeleteAppUserArgs
  ): Promise<AppUser | null> {
    try {
      return await this.service.deleteAppUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

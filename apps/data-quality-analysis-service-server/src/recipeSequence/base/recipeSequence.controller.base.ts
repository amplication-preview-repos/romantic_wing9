/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecipeSequenceService } from "../recipeSequence.service";
import { RecipeSequenceCreateInput } from "./RecipeSequenceCreateInput";
import { RecipeSequence } from "./RecipeSequence";
import { RecipeSequenceFindManyArgs } from "./RecipeSequenceFindManyArgs";
import { RecipeSequenceWhereUniqueInput } from "./RecipeSequenceWhereUniqueInput";
import { RecipeSequenceUpdateInput } from "./RecipeSequenceUpdateInput";

export class RecipeSequenceControllerBase {
  constructor(protected readonly service: RecipeSequenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RecipeSequence })
  async createRecipeSequence(
    @common.Body() data: RecipeSequenceCreateInput
  ): Promise<RecipeSequence> {
    return await this.service.createRecipeSequence({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        recipes: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RecipeSequence] })
  @ApiNestedQuery(RecipeSequenceFindManyArgs)
  async recipeSequences(
    @common.Req() request: Request
  ): Promise<RecipeSequence[]> {
    const args = plainToClass(RecipeSequenceFindManyArgs, request.query);
    return this.service.recipeSequences({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        recipes: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RecipeSequence })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recipeSequence(
    @common.Param() params: RecipeSequenceWhereUniqueInput
  ): Promise<RecipeSequence | null> {
    const result = await this.service.recipeSequence({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        recipes: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RecipeSequence })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecipeSequence(
    @common.Param() params: RecipeSequenceWhereUniqueInput,
    @common.Body() data: RecipeSequenceUpdateInput
  ): Promise<RecipeSequence | null> {
    try {
      return await this.service.updateRecipeSequence({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          recipes: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RecipeSequence })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecipeSequence(
    @common.Param() params: RecipeSequenceWhereUniqueInput
  ): Promise<RecipeSequence | null> {
    try {
      return await this.service.deleteRecipeSequence({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          recipes: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

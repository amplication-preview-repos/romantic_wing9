/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RecipeSequence as PrismaRecipeSequence } from "@prisma/client";

export class RecipeSequenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RecipeSequenceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.recipeSequence.count(args);
  }

  async recipeSequences(
    args: Prisma.RecipeSequenceFindManyArgs
  ): Promise<PrismaRecipeSequence[]> {
    return this.prisma.recipeSequence.findMany(args);
  }
  async recipeSequence(
    args: Prisma.RecipeSequenceFindUniqueArgs
  ): Promise<PrismaRecipeSequence | null> {
    return this.prisma.recipeSequence.findUnique(args);
  }
  async createRecipeSequence(
    args: Prisma.RecipeSequenceCreateArgs
  ): Promise<PrismaRecipeSequence> {
    return this.prisma.recipeSequence.create(args);
  }
  async updateRecipeSequence(
    args: Prisma.RecipeSequenceUpdateArgs
  ): Promise<PrismaRecipeSequence> {
    return this.prisma.recipeSequence.update(args);
  }
  async deleteRecipeSequence(
    args: Prisma.RecipeSequenceDeleteArgs
  ): Promise<PrismaRecipeSequence> {
    return this.prisma.recipeSequence.delete(args);
  }
}

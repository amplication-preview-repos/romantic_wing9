/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RecipeSequence } from "./RecipeSequence";
import { RecipeSequenceCountArgs } from "./RecipeSequenceCountArgs";
import { RecipeSequenceFindManyArgs } from "./RecipeSequenceFindManyArgs";
import { RecipeSequenceFindUniqueArgs } from "./RecipeSequenceFindUniqueArgs";
import { CreateRecipeSequenceArgs } from "./CreateRecipeSequenceArgs";
import { UpdateRecipeSequenceArgs } from "./UpdateRecipeSequenceArgs";
import { DeleteRecipeSequenceArgs } from "./DeleteRecipeSequenceArgs";
import { RecipeSequenceService } from "../recipeSequence.service";
@graphql.Resolver(() => RecipeSequence)
export class RecipeSequenceResolverBase {
  constructor(protected readonly service: RecipeSequenceService) {}

  async _recipeSequencesMeta(
    @graphql.Args() args: RecipeSequenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RecipeSequence])
  async recipeSequences(
    @graphql.Args() args: RecipeSequenceFindManyArgs
  ): Promise<RecipeSequence[]> {
    return this.service.recipeSequences(args);
  }

  @graphql.Query(() => RecipeSequence, { nullable: true })
  async recipeSequence(
    @graphql.Args() args: RecipeSequenceFindUniqueArgs
  ): Promise<RecipeSequence | null> {
    const result = await this.service.recipeSequence(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RecipeSequence)
  async createRecipeSequence(
    @graphql.Args() args: CreateRecipeSequenceArgs
  ): Promise<RecipeSequence> {
    return await this.service.createRecipeSequence({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RecipeSequence)
  async updateRecipeSequence(
    @graphql.Args() args: UpdateRecipeSequenceArgs
  ): Promise<RecipeSequence | null> {
    try {
      return await this.service.updateRecipeSequence({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecipeSequence)
  async deleteRecipeSequence(
    @graphql.Args() args: DeleteRecipeSequenceArgs
  ): Promise<RecipeSequence | null> {
    try {
      return await this.service.deleteRecipeSequence(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

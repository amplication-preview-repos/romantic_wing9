/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecipeExecutionService } from "../recipeExecution.service";
import { RecipeExecutionCreateInput } from "./RecipeExecutionCreateInput";
import { RecipeExecution } from "./RecipeExecution";
import { RecipeExecutionFindManyArgs } from "./RecipeExecutionFindManyArgs";
import { RecipeExecutionWhereUniqueInput } from "./RecipeExecutionWhereUniqueInput";
import { RecipeExecutionUpdateInput } from "./RecipeExecutionUpdateInput";

export class RecipeExecutionControllerBase {
  constructor(protected readonly service: RecipeExecutionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RecipeExecution })
  async createRecipeExecution(
    @common.Body() data: RecipeExecutionCreateInput
  ): Promise<RecipeExecution> {
    return await this.service.createRecipeExecution({
      data: {
        ...data,

        recipe: data.recipe
          ? {
              connect: data.recipe,
            }
          : undefined,

        dataTable: data.dataTable
          ? {
              connect: data.dataTable,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        executedAt: true,
        results: true,
        isErrored: true,

        recipe: {
          select: {
            id: true,
          },
        },

        dataTable: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RecipeExecution] })
  @ApiNestedQuery(RecipeExecutionFindManyArgs)
  async recipeExecutions(
    @common.Req() request: Request
  ): Promise<RecipeExecution[]> {
    const args = plainToClass(RecipeExecutionFindManyArgs, request.query);
    return this.service.recipeExecutions({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        executedAt: true,
        results: true,
        isErrored: true,

        recipe: {
          select: {
            id: true,
          },
        },

        dataTable: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RecipeExecution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recipeExecution(
    @common.Param() params: RecipeExecutionWhereUniqueInput
  ): Promise<RecipeExecution | null> {
    const result = await this.service.recipeExecution({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        executedAt: true,
        results: true,
        isErrored: true,

        recipe: {
          select: {
            id: true,
          },
        },

        dataTable: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RecipeExecution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecipeExecution(
    @common.Param() params: RecipeExecutionWhereUniqueInput,
    @common.Body() data: RecipeExecutionUpdateInput
  ): Promise<RecipeExecution | null> {
    try {
      return await this.service.updateRecipeExecution({
        where: params,
        data: {
          ...data,

          recipe: data.recipe
            ? {
                connect: data.recipe,
              }
            : undefined,

          dataTable: data.dataTable
            ? {
                connect: data.dataTable,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          executedAt: true,
          results: true,
          isErrored: true,

          recipe: {
            select: {
              id: true,
            },
          },

          dataTable: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RecipeExecution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecipeExecution(
    @common.Param() params: RecipeExecutionWhereUniqueInput
  ): Promise<RecipeExecution | null> {
    try {
      return await this.service.deleteRecipeExecution({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          executedAt: true,
          results: true,
          isErrored: true,

          recipe: {
            select: {
              id: true,
            },
          },

          dataTable: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RecipeExecution } from "./RecipeExecution";
import { RecipeExecutionCountArgs } from "./RecipeExecutionCountArgs";
import { RecipeExecutionFindManyArgs } from "./RecipeExecutionFindManyArgs";
import { RecipeExecutionFindUniqueArgs } from "./RecipeExecutionFindUniqueArgs";
import { CreateRecipeExecutionArgs } from "./CreateRecipeExecutionArgs";
import { UpdateRecipeExecutionArgs } from "./UpdateRecipeExecutionArgs";
import { DeleteRecipeExecutionArgs } from "./DeleteRecipeExecutionArgs";
import { Recipe } from "../../recipe/base/Recipe";
import { DataTable } from "../../dataTable/base/DataTable";
import { RecipeExecutionService } from "../recipeExecution.service";
@graphql.Resolver(() => RecipeExecution)
export class RecipeExecutionResolverBase {
  constructor(protected readonly service: RecipeExecutionService) {}

  async _recipeExecutionsMeta(
    @graphql.Args() args: RecipeExecutionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RecipeExecution])
  async recipeExecutions(
    @graphql.Args() args: RecipeExecutionFindManyArgs
  ): Promise<RecipeExecution[]> {
    return this.service.recipeExecutions(args);
  }

  @graphql.Query(() => RecipeExecution, { nullable: true })
  async recipeExecution(
    @graphql.Args() args: RecipeExecutionFindUniqueArgs
  ): Promise<RecipeExecution | null> {
    const result = await this.service.recipeExecution(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RecipeExecution)
  async createRecipeExecution(
    @graphql.Args() args: CreateRecipeExecutionArgs
  ): Promise<RecipeExecution> {
    return await this.service.createRecipeExecution({
      ...args,
      data: {
        ...args.data,

        recipe: args.data.recipe
          ? {
              connect: args.data.recipe,
            }
          : undefined,

        dataTable: args.data.dataTable
          ? {
              connect: args.data.dataTable,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RecipeExecution)
  async updateRecipeExecution(
    @graphql.Args() args: UpdateRecipeExecutionArgs
  ): Promise<RecipeExecution | null> {
    try {
      return await this.service.updateRecipeExecution({
        ...args,
        data: {
          ...args.data,

          recipe: args.data.recipe
            ? {
                connect: args.data.recipe,
              }
            : undefined,

          dataTable: args.data.dataTable
            ? {
                connect: args.data.dataTable,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecipeExecution)
  async deleteRecipeExecution(
    @graphql.Args() args: DeleteRecipeExecutionArgs
  ): Promise<RecipeExecution | null> {
    try {
      return await this.service.deleteRecipeExecution(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Recipe, {
    nullable: true,
    name: "recipe",
  })
  async getRecipe(
    @graphql.Parent() parent: RecipeExecution
  ): Promise<Recipe | null> {
    const result = await this.service.getRecipe(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => DataTable, {
    nullable: true,
    name: "dataTable",
  })
  async getDataTable(
    @graphql.Parent() parent: RecipeExecution
  ): Promise<DataTable | null> {
    const result = await this.service.getDataTable(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

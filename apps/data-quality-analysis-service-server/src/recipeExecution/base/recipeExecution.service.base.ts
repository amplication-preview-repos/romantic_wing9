/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RecipeExecution as PrismaRecipeExecution,
  Recipe as PrismaRecipe,
  DataTable as PrismaDataTable,
} from "@prisma/client";

export class RecipeExecutionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RecipeExecutionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.recipeExecution.count(args);
  }

  async recipeExecutions(
    args: Prisma.RecipeExecutionFindManyArgs
  ): Promise<PrismaRecipeExecution[]> {
    return this.prisma.recipeExecution.findMany(args);
  }
  async recipeExecution(
    args: Prisma.RecipeExecutionFindUniqueArgs
  ): Promise<PrismaRecipeExecution | null> {
    return this.prisma.recipeExecution.findUnique(args);
  }
  async createRecipeExecution(
    args: Prisma.RecipeExecutionCreateArgs
  ): Promise<PrismaRecipeExecution> {
    return this.prisma.recipeExecution.create(args);
  }
  async updateRecipeExecution(
    args: Prisma.RecipeExecutionUpdateArgs
  ): Promise<PrismaRecipeExecution> {
    return this.prisma.recipeExecution.update(args);
  }
  async deleteRecipeExecution(
    args: Prisma.RecipeExecutionDeleteArgs
  ): Promise<PrismaRecipeExecution> {
    return this.prisma.recipeExecution.delete(args);
  }

  async getRecipe(parentId: string): Promise<PrismaRecipe | null> {
    return this.prisma.recipeExecution
      .findUnique({
        where: { id: parentId },
      })
      .recipe();
  }

  async getDataTable(parentId: string): Promise<PrismaDataTable | null> {
    return this.prisma.recipeExecution
      .findUnique({
        where: { id: parentId },
      })
      .dataTable();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataTableService } from "../dataTable.service";
import { DataTableCreateInput } from "./DataTableCreateInput";
import { DataTable } from "./DataTable";
import { DataTableFindManyArgs } from "./DataTableFindManyArgs";
import { DataTableWhereUniqueInput } from "./DataTableWhereUniqueInput";
import { DataTableUpdateInput } from "./DataTableUpdateInput";
import { ColumnFindManyArgs } from "../../column/base/ColumnFindManyArgs";
import { Column } from "../../column/base/Column";
import { ColumnWhereUniqueInput } from "../../column/base/ColumnWhereUniqueInput";
import { AnalysisResultFindManyArgs } from "../../analysisResult/base/AnalysisResultFindManyArgs";
import { AnalysisResult } from "../../analysisResult/base/AnalysisResult";
import { AnalysisResultWhereUniqueInput } from "../../analysisResult/base/AnalysisResultWhereUniqueInput";
import { RecipeExecutionFindManyArgs } from "../../recipeExecution/base/RecipeExecutionFindManyArgs";
import { RecipeExecution } from "../../recipeExecution/base/RecipeExecution";
import { RecipeExecutionWhereUniqueInput } from "../../recipeExecution/base/RecipeExecutionWhereUniqueInput";

export class DataTableControllerBase {
  constructor(protected readonly service: DataTableService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataTable })
  async createDataTable(
    @common.Body() data: DataTableCreateInput
  ): Promise<DataTable> {
    return await this.service.createDataTable({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataTable] })
  @ApiNestedQuery(DataTableFindManyArgs)
  async dataTables(@common.Req() request: Request): Promise<DataTable[]> {
    const args = plainToClass(DataTableFindManyArgs, request.query);
    return this.service.dataTables({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataTable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataTable(
    @common.Param() params: DataTableWhereUniqueInput
  ): Promise<DataTable | null> {
    const result = await this.service.dataTable({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataTable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataTable(
    @common.Param() params: DataTableWhereUniqueInput,
    @common.Body() data: DataTableUpdateInput
  ): Promise<DataTable | null> {
    try {
      return await this.service.updateDataTable({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataTable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataTable(
    @common.Param() params: DataTableWhereUniqueInput
  ): Promise<DataTable | null> {
    try {
      return await this.service.deleteDataTable({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/columns")
  @ApiNestedQuery(ColumnFindManyArgs)
  async findColumns(
    @common.Req() request: Request,
    @common.Param() params: DataTableWhereUniqueInput
  ): Promise<Column[]> {
    const query = plainToClass(ColumnFindManyArgs, request.query);
    const results = await this.service.findColumns(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dataType: true,
        name: true,

        dataTable: {
          select: {
            id: true,
          },
        },

        columnStats: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/columns")
  async connectColumns(
    @common.Param() params: DataTableWhereUniqueInput,
    @common.Body() body: ColumnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      columns: {
        connect: body,
      },
    };
    await this.service.updateDataTable({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/columns")
  async updateColumns(
    @common.Param() params: DataTableWhereUniqueInput,
    @common.Body() body: ColumnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      columns: {
        set: body,
      },
    };
    await this.service.updateDataTable({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/columns")
  async disconnectColumns(
    @common.Param() params: DataTableWhereUniqueInput,
    @common.Body() body: ColumnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      columns: {
        disconnect: body,
      },
    };
    await this.service.updateDataTable({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/analysisResults")
  @ApiNestedQuery(AnalysisResultFindManyArgs)
  async findAnalysisResults(
    @common.Req() request: Request,
    @common.Param() params: DataTableWhereUniqueInput
  ): Promise<AnalysisResult[]> {
    const query = plainToClass(AnalysisResultFindManyArgs, request.query);
    const results = await this.service.findAnalysisResults(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        results: true,

        recipe: {
          select: {
            id: true,
          },
        },

        dataTable: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/analysisResults")
  async connectAnalysisResults(
    @common.Param() params: DataTableWhereUniqueInput,
    @common.Body() body: AnalysisResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analysisResults: {
        connect: body,
      },
    };
    await this.service.updateDataTable({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/analysisResults")
  async updateAnalysisResults(
    @common.Param() params: DataTableWhereUniqueInput,
    @common.Body() body: AnalysisResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analysisResults: {
        set: body,
      },
    };
    await this.service.updateDataTable({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/analysisResults")
  async disconnectAnalysisResults(
    @common.Param() params: DataTableWhereUniqueInput,
    @common.Body() body: AnalysisResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analysisResults: {
        disconnect: body,
      },
    };
    await this.service.updateDataTable({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/recipeExecutions")
  @ApiNestedQuery(RecipeExecutionFindManyArgs)
  async findRecipeExecutions(
    @common.Req() request: Request,
    @common.Param() params: DataTableWhereUniqueInput
  ): Promise<RecipeExecution[]> {
    const query = plainToClass(RecipeExecutionFindManyArgs, request.query);
    const results = await this.service.findRecipeExecutions(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        executedAt: true,
        results: true,
        isErrored: true,

        recipe: {
          select: {
            id: true,
          },
        },

        dataTable: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recipeExecutions")
  async connectRecipeExecutions(
    @common.Param() params: DataTableWhereUniqueInput,
    @common.Body() body: RecipeExecutionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipeExecutions: {
        connect: body,
      },
    };
    await this.service.updateDataTable({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recipeExecutions")
  async updateRecipeExecutions(
    @common.Param() params: DataTableWhereUniqueInput,
    @common.Body() body: RecipeExecutionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipeExecutions: {
        set: body,
      },
    };
    await this.service.updateDataTable({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recipeExecutions")
  async disconnectRecipeExecutions(
    @common.Param() params: DataTableWhereUniqueInput,
    @common.Body() body: RecipeExecutionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipeExecutions: {
        disconnect: body,
      },
    };
    await this.service.updateDataTable({
      where: params,
      data,
      select: { id: true },
    });
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DataTable as PrismaDataTable,
  Column as PrismaColumn,
  AnalysisResult as PrismaAnalysisResult,
  RecipeExecution as PrismaRecipeExecution,
} from "@prisma/client";

export class DataTableServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataTableCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataTable.count(args);
  }

  async dataTables(
    args: Prisma.DataTableFindManyArgs
  ): Promise<PrismaDataTable[]> {
    return this.prisma.dataTable.findMany(args);
  }
  async dataTable(
    args: Prisma.DataTableFindUniqueArgs
  ): Promise<PrismaDataTable | null> {
    return this.prisma.dataTable.findUnique(args);
  }
  async createDataTable(
    args: Prisma.DataTableCreateArgs
  ): Promise<PrismaDataTable> {
    return this.prisma.dataTable.create(args);
  }
  async updateDataTable(
    args: Prisma.DataTableUpdateArgs
  ): Promise<PrismaDataTable> {
    return this.prisma.dataTable.update(args);
  }
  async deleteDataTable(
    args: Prisma.DataTableDeleteArgs
  ): Promise<PrismaDataTable> {
    return this.prisma.dataTable.delete(args);
  }

  async findColumns(
    parentId: string,
    args: Prisma.ColumnFindManyArgs
  ): Promise<PrismaColumn[]> {
    return this.prisma.dataTable
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .columns(args);
  }

  async findAnalysisResults(
    parentId: string,
    args: Prisma.AnalysisResultFindManyArgs
  ): Promise<PrismaAnalysisResult[]> {
    return this.prisma.dataTable
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .analysisResults(args);
  }

  async findRecipeExecutions(
    parentId: string,
    args: Prisma.RecipeExecutionFindManyArgs
  ): Promise<PrismaRecipeExecution[]> {
    return this.prisma.dataTable
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recipeExecutions(args);
  }
}
